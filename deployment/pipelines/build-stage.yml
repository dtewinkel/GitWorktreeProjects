stages:
- stage: build
  displayName: Version and build
  jobs:

  - job: run_build
    displayName: Build, publish GitWorktreeProjects Module
    variables:
      Module.Path: $(Module.Name)
      Module.Tests.Path: $(Module.Name).Tests
      Modules.Path: Modules
      Module.ArtifactPath: Modules/$(Module.Name)
      Repository.Name: Local$(Module.Name)Repo
      Repository.ArtifactPath: Repositories/$(Repository.Name)
      CompanyName: Daniël te Winkel
      Author: Daniël te Winkel
      Pester.TestOutput: $(System.DefaultWorkingDirectory)/TestResults.Pester.xml
      Pester.CoverageOutput: $(System.DefaultWorkingDirectory)/Coverage.Pester.xml
    pool:
      vmImage: windows-latest
    steps:

    - task: GitVersion@5
      displayName: Determine Version using GitVersion
      inputs:
        configFilePath: GitVersion.yml

    - task: PowerShell@2
      displayName: Install required PowerShell modules and other tools
      inputs:
        filePath: deployment/pipelines/scripts/Configure.ps1
        pwsh: true

    - task: PowerShell@2
      displayName: Build GitWorktreeProjects module
      inputs:
        filePath: deployment/pipelines/scripts/Build.ps1
        arguments: -GitVersionJson $(GitVersion)
        pwsh: true

    - task: PowerShell@2
      displayName: Run ScriptAnalyzer
      inputs:
        filePath: deployment/pipelines/scripts/AnalyzeScripts.ps1
        pwsh: true

    - task: PowerShell@2
      displayName: Run Pester Unit Tests
      inputs:
        filePath: deployment/pipelines/scripts/Test.ps1
        pwsh: true

    - task: PublishTestResults@2
      inputs:
        testRunner: NUnit
        testResultsFiles: $(Pester.TestOutput)
        testRunTitle: Pester Unit Tests
        failTaskOnFailedTests: true
      displayName: Publish Pester Unit Test Results
      condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')

    - pwsh: |
        $modulePaths = (dir "$(Modules.Path)" -Directory -Recurse).FullName -join ';'
        Write-Host "Setting ModulePaths based on '$(Modules.Path)' to '${modulePaths}'."
        Write-Host "##vso[task.setvariable variable=ModulePaths]${modulePaths}"
      displayName: Determine module paths

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: JaCoCo
        summaryFileLocation: $(Pester.CoverageOutput)
        pathToSources: $(ModulePaths)
      displayName: Publish Pester Unit Test Code Coverage
      condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')

    - publish: $(Repository.ArtifactPath)
      artifact: $(Repository.ArtifactName)
      displayName: Publish $(Repository.ArtifactName) Artifact
